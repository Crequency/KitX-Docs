import{_ as a,M as c,p as i,q as r,R as o,t as e,N as d,a1 as t}from"./framework-a7aa02af.js";const n={},s=o("h1",{id:"适用于-c-的-loader",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#适用于-c-的-loader","aria-hidden":"true"},"#"),e(" 适用于 C# 的 Loader")],-1),h={href:"https://github.com/Crequency/KitX-Loaders/tree/main/KitX.Loader.CSharp",target:"_blank",rel:"noopener noreferrer"},u=t('<h2 id="设计思路" tabindex="-1"><a class="header-anchor" href="#设计思路" aria-hidden="true">#</a> 设计思路</h2><p>先决条件:</p><ol><li>dotnet 平台中已有成熟的插件框架: MAF/MEF</li><li>csharp 是基于虚拟机和 CIL 的语言, 易于实现主动加载器</li><li>csharp 有成熟的接口和反射机制</li></ol><p>设计:</p><p>插件实现特定接口, 加载器通过 MEF 框架加载插件之后, 通过特定接口获取插件信息并进行调度</p><h2 id="实际设计" tabindex="-1"><a class="header-anchor" href="#实际设计" aria-hidden="true">#</a> 实际设计</h2><h3 id="文件组成" tabindex="-1"><a class="header-anchor" href="#文件组成" aria-hidden="true">#</a> 文件组成</h3><p>程序部分包含:</p><ul><li><code>ArgsParser.cs</code>: 启动参数处理器</li><li><code>Option.cs</code>: 启动选项定义类</li><li><code>Program.cs</code>: 程序入口</li></ul><p>加载器部分包含</p><ul><li><code>CommunicationManager.cs</code>: 通讯管理器, 负责处理与 KitX Dashboard 的通讯</li><li><code>PluginManager.cs</code>: 插件管理器, 调度 KitX Plugin 的生命周期</li></ul><h3 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程" aria-hidden="true">#</a> 执行流程</h3><ol><li>处理命令行启动参数 <ol><li>得到 KitX Dashboard 插件服务器地址 <ol><li>随即实例化 <code>CommunicationManager</code> 并开始 TCP 通讯</li></ol></li><li>得到插件跟启动文件路径 <ol><li>随即实例化 <code>PluginManager.cs</code></li><li>传入发送信息的回调函数</li><li>加载插件 (通过 MEF 框架) <ol><li>从插件实现了 <code>IIdentityInterface</code> 接口的类中整理 <code>PluginStruct</code> 实例</li><li>向仪表盘发送 Json 序列化的 <code>PluginStruct</code>, 格式: &quot;PluginStruct: <code>content</code>&quot;</li><li>获取插件实现了 <code>IController</code> 接口的类实例 <code>controller</code></li><li>调用 <code>controller.SetRootPath</code> 向插件传入插件文件所在路径</li><li>调用 <code>controller.SetSendCommandAction</code> 向插件传入发送 <code>Command</code> 的回调函数</li><li>调用 <code>controller.Start</code> 开始插件生命周期</li></ol></li></ol></li></ol></li></ol>',13);function p(_,m){const l=c("ExternalLinkIcon");return i(),r("div",null,[s,o("p",null,[e("查看 "),o("a",h,[e("源代码"),d(l)]),e(" .")]),u])}const g=a(n,[["render",p],["__file","loader-csharp.html.vue"]]);export{g as default};
