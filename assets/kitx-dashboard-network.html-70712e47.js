import{_ as t,M as c,p as u,q as r,R as e,t as l,N as i,V as d,a1 as n}from"./framework-a7aa02af.js";const a={},s=e("h1",{id:"kitx-dashboard-网络",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#kitx-dashboard-网络","aria-hidden":"true"},"#"),l(" KitX Dashboard 网络")],-1),h=e("h2",{id:"plugins-server",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#plugins-server","aria-hidden":"true"},"#"),l(" Plugins Server")],-1),m=e("p",null,"通信协议: WebSocket",-1),_=e("p",null,"流程:",-1),k=e("li",null,"生成 ConnectionId",-1),y=e("li",null,[l("启动 Loader "),e("ul",null,[e("li",null,[e("code",null,"--load"),l(" 参数传入插件启动文件路径")]),e("li",null,[e("code",null,"--connect"),l(" 参数传入连接路径, 如 "),e("code",null,"ws://localhost:8080/plugin/<ConnectionId>")])])],-1),p=e("li",null,"Loader 启动后, 通过 WebSocket 连接到 Dashboard",-1),f=n("<li>Loader 向 Dashboard 注册插件, 发送 <code>PluginInfo</code><ul><li><code>[PLUG]</code> Command.Request: &quot;RegisterPlugin&quot;</li></ul></li><li>从 Dashboard 获取别的信息, 包括插件工作路径等 <ul><li><code>[PLUG]</code> Command.Request: &quot;RequestWorkingDetail&quot;</li><li><code>[DASH]</code> Command.Request: &quot;ReceiveWorkingDetail&quot;</li></ul></li>",2),C=e("ul",null,[e("li",null,[e("code",null,"[PLUG]"),l(' Command.Request: "ReportStatus"')]),e("li",null,[e("code",null,"[PLUG]"),l(' Command.Request: "RequestCommand"')]),e("li",null,[e("code",null,"[DASH]"),l(' Command.Request: "ReceiveCommand"')])],-1),b=e("h2",{id:"devices-server",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#devices-server","aria-hidden":"true"},"#"),l(" Devices Server")],-1),x=e("p",null,"通信协议: Http",-1),q=n('<p>暴露如下 APIs</p><h3 id="device" tabindex="-1"><a class="header-anchor" href="#device" aria-hidden="true">#</a> /Device</h3><ul><li><code>[GET]</code> / <ul><li><code>[FromQuery]</code> Token // 访问令牌</li><li>获取设备信息</li></ul></li><li><code>[POST]</code> /ExchangeKey <ul><li><code>[FromQuery]</code> Key // 密钥</li><li><code>[FromQuery]</code> KeyId // 密钥标识</li><li><code>[FromQuery]</code> DecryptionVerifyCode // 密钥解密验证码</li><li>发起密钥交换流程</li></ul></li><li><code>[POST]</code> /ExchangeKeyBack <ul><li><code>[FromQuery]</code> Key // 本机密钥</li><li><code>[FromQuery]</code> KeyId // 密钥标识</li><li>返回本机密钥 (由被调用 /ExchangeKey 的设备向发起方调用该 API 来完成密钥交换过程)</li></ul></li><li><code>[POST]</code> /Swap <ul><li><code>[FromQuery]</code> Token // 访问令牌</li><li>// ToDo</li><li>移交主控 (由主控向从控发起)</li></ul></li><li><code>[GET]</code> /Connect <ul><li><code>[FromQuery]</code> KeyId // 密钥标识</li><li><code>[FromQuery]</code> VerifyCode // 验证码</li><li><code>[FromQuery]</code> VerifyAnwser // 验证答案</li><li><code>[FromQuery]</code> GivenToken // 加密的 Client Token</li><li>Host 根据 KeyId 使用对应的 Key 解密 VerifyCode, 若结果与 VerifyAnwser 一致, 则身份验证通过, 解密并存储 Client Token, 返回 Host Token</li></ul></li></ul><h3 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> /Plugin</h3>',4),v=e("code",null,"[GET]",-1),R=e("li",null,[e("code",null,"[FromQuery]"),l(" Token // 访问令牌")],-1),g=e("code",null,"[FromQuery]",-1);function w(K,T){const o=c("RouterLink");return u(),r("div",null,[s,h,e("blockquote",null,[m,e("p",null,[l("报文协议: "),i(o,{to:"/rules/network/kitx-web-command.html"},{default:d(()=>[l("KWC")]),_:1})])]),_,e("ol",null,[k,y,p,e("li",null,[l("完成以下流程 "),e("ol",null,[f,e("li",null,[l("进入插件工作循环: 汇报插件状态, 接收 "),i(o,{to:"/rules/network/kitx-web-command.html"},{default:d(()=>[l("KWC")]),_:1}),C])])])]),b,e("blockquote",null,[x,e("p",null,[l("报文协议: "),i(o,{to:"/rules/network/kitx-web-command.html"},{default:d(()=>[l("KWC")]),_:1})])]),q,e("ul",null,[e("li",null,[v,l(" /Request "),e("ul",null,[R,e("li",null,[g,l(" Request // 请求报文 ("),i(o,{to:"/rules/network/kitx-web-command.html"},{default:d(()=>[l("KWC")]),_:1}),l(" 格式)")])])])])])}const F=t(a,[["render",w],["__file","kitx-dashboard-network.html.vue"]]);export{F as default};
