import{_ as r,M as n,p as c,q as u,N as s,V as d,R as e,t as a,a1 as i}from"./framework-96b046e1.js";const p={},h=i(`<h1 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手" aria-hidden="true">#</a> 快速上手</h1><h2 id="获取源码" tabindex="-1"><a class="header-anchor" href="#获取源码" aria-hidden="true">#</a> 获取源码</h2><h3 id="clone-主仓库" tabindex="-1"><a class="header-anchor" href="#clone-主仓库" aria-hidden="true">#</a> Clone 主仓库</h3><p>KitX 项目使用 Git 进行版本控制, 你可以通过以下命令获取源码:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:Crequency/KitX.git
<span class="token builtin class-name">cd</span> KitX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>若您未设置 SSH 密钥, 可以使用 HTTPS 方式获取源码:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/Crequency/KitX.git
<span class="token builtin class-name">cd</span> KitX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="初始化子模块" tabindex="-1"><a class="header-anchor" href="#初始化子模块" aria-hidden="true">#</a> 初始化子模块</h3><blockquote><p>您也可以在上一步中增加 <code>--recurse-submodules</code> 参数来获取子模块从而跳过这一步</p></blockquote><p>KitX 项目使用子模块来对仓库进行拆分, 你需要在获取源码后执行以下命令来初始化子模块:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> submodule init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来使用 KitX 的初始化工具来选择获取哪些子模块:</p>`,13),b=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("./ToolKits/start.sh "),e("span",{class:"token operator"},"<"),a("type"),e("span",{class:"token operator"},">"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),m=e("div",{class:"language-pwsh line-numbers-mode","data-ext":"pwsh"},[e("pre",{class:"language-pwsh"},[e("code",null,`./ToolKits/start.ps1 <type>
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),v=i('<p>其中 <code>&lt;type&gt;</code> 为开发类型, 可选值为:</p><p><code>dashboard</code> | <code>mobile</code> | <code>loader</code> | <code>plugin</code> | <code>installer</code> | <code>reference</code></p><p>若您想要开发 KitX PC 端客户端, 请 start <code>dashboard</code> 和 <code>reference</code></p><p>若您想要开发 KitX 移动端客户端, 请 start <code>mobile</code></p><p>若您想要开发加载器, 请 start <code>loader</code></p><p>若您想要开发插件, 请 start <code>loader</code> 和 <code>plugin</code></p><p>若您想要开发 KitX 安装包, 请 start <code>installer</code></p><hr><h2 id="构建项目" tabindex="-1"><a class="header-anchor" href="#构建项目" aria-hidden="true">#</a> 构建项目</h2><h3 id="编译前准备" tabindex="-1"><a class="header-anchor" href="#编译前准备" aria-hidden="true">#</a> 编译前准备</h3>',10),g={href:"https://dotnet.microsoft.com/download/dotnet/6.0",target:"_blank",rel:"noopener noreferrer"},_=e("br",null,null,-1),x=e("code",null,"dotnet --list-sdks",-1),f=i(`<hr><h3 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h3><p>您只需要 <code>cd</code> 至您想要编译的项目目录 (包含 <code>.csproj</code> 文件), 然后运行以下命令即可:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dotnet build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若运行命令 <code>dotnet run</code> 则会自动编译并运行项目</p><details class="custom-container details"><summary>面向发布的编译</summary><p>您可能会注意到, 在 <code>KitX Dashboard/Properties/PublishProfiles/</code> 下有许多 <code>.pubxml</code> 后缀的文件</p><p>这些便是发布配置文件, 您可以使用命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token string">&quot;KitX Dashboard&quot;</span>
dotnet publish /p:Profile<span class="token operator">=</span>Properties/PublishProfiles/<span class="token operator">&lt;</span>xxx<span class="token operator">&gt;</span>.pubxml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>来使用这些配置文件进行发布, 其中 <code>&lt;xxx&gt;</code> 为配置文件名</p><p>发布后的二进制文件将存在于 <code>KitX Publish/</code> 下</p><p>您也可以执行以下命令来一键发布所有配置文件:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token string">&quot;ToolKits/KitX.ToolKits.Publisher&quot;</span>
dotnet run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h3 id="其它构建方式" tabindex="-1"><a class="header-anchor" href="#其它构建方式" aria-hidden="true">#</a> 其它构建方式</h3><p>您也可以使用一些 IDE 来构建项目<br> 例如:</p><ul><li>Visual Studio (推荐 2019 以上的版本, 目前建议使用 2022 版本)</li><li>Jetbrains Rider</li></ul><p>其中, 您可以在 Visual Studio 中右键解决方案资源管理器中的项目, 选择 <code>发布</code>, 然后选择发布配置文件来进行发布<br> 您也可以在 Rider 中使用类似的操作来进行发布</p><p>或者, 您也可以配置编辑器来简化构建步骤<br> 例如:</p><ul><li>Visual Studio Code</li><li>Vim</li></ul><p>此处省略配置编辑器的步骤, 请自行搜索相关教程</p>`,14);function k(K,X){const t=n("CodeGroupItem"),o=n("CodeGroup"),l=n("ExternalLinkIcon");return c(),u("div",null,[h,s(o,null,{default:d(()=>[s(t,{title:"Bash"},{default:d(()=>[b]),_:1}),s(t,{title:"PowerShell"},{default:d(()=>[m]),_:1})]),_:1}),v,e("ol",null,[e("li",null,[a("您需要安装 dotnet 6 SDK, 请前往 "),e("a",g,[a("dotnet 官网"),s(l)]),a(" 下载并安装"),_,a(" 安装成功的标志是: 成功运行命令 "),x,a(" 并且列出了 dotnet 6 SDK 的版本号")])]),f])}const C=r(p,[["render",k],["__file","getting-started.html.vue"]]);export{C as default};
